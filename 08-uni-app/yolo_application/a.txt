<template>
	<view>
		<canvas ref="container" class="container"></canvas>
		<canvas ref="predict" class="predict"></canvas>
	</view>
</template>

<script>
	import* as echarts from 'echarts'
	
	export default {
		data() {
			return {
				myChart:null
			}
		},
		methods: {
			async initChart(){
				await this.$nextTick();
				// const chartContainer = document.getElementById("container")
				const chartContainer = this.$refs.container
				this.myChart = echarts.init(chartContainer)
				let option1 = {
				  title: {
				    text: '监控内容统计',
				    subtext: '2025年3月25日',
				    left: 'center'
				  },
				  tooltip: {
				    trigger: 'item'
				  },
				  legend: {
				    orient: 'vertical',
				    left: 'left'
				  },
				  series: [
				    {
				      name: 'Access From',
				      type: 'pie',
				      radius: '50%',
				      data: [
				        { value: 1048, name: 'Person' },
				        { value: 735, name: 'Car' },
				        { value: 580, name: 'Bus' },
				        { value: 484, name: 'Dog' },
				        { value: 300, name: 'Bicycle' }
				      ],
				      emphasis: {
				        itemStyle: {
				          shadowBlur: 10,
				          shadowOffsetX: 0,
				          shadowColor: 'rgba(0, 0, 0, 0.5)'
				        }
				      }
				    }
				  ]
				};
				
				this.myChart.setOption(option1);
				// const chartPredict = document.getElementById("predict")
				const chartPredict = this.$refs.predict
				let myPredict = echarts.init(chartPredict)
				
				let option2 = {
				  title: {
				    text: ''
				  },
				  tooltip: {
				    trigger: 'axis',
				    axisPointer: {
				      type: 'cross',
				      label: {
				        backgroundColor: '#6a7985'
				      }
				    }
				  },
				  legend: {
				    data: ['真实人流量', '模型预测人流量']
				  },
				  toolbox: {
				    feature: {
				      saveAsImage: {}
				    }
				  },
				  grid: {
				    left: '3%',
				    right: '4%',
				    bottom: '3%',
				    containLabel: true
				  },
				  xAxis: [
				    {
				      type: 'category',
				      boundaryGap: false,
				      data: ['6:00-8:00', '8:00-10:00', '10:00-12:00', '12:00-14:00', '14:00-16:00', '16:00-18:00']
				    }
				  ],
				  yAxis: [
				    {
				      type: 'value'
				    }
				  ],
				  series: [
				    {
				      name: '真实人流量',
				      type: 'line',
				      stack: 'Total',
				      areaStyle: {},
				      emphasis: {
				        focus: 'series'
				      },
				      data: [120, 132, 101, 134, 90, 230, 210]
				    },
				    {
				      name: '模型预测人流量',
				      type: 'line',
				      stack: 'Total',
				      areaStyle: {},
				      emphasis: {
				        focus: 'series'
				      },
				      data: [220, 182, 191, 234, 290, 330, 310]
				    }
				  ]
				};
				option2 && myPredict.setOption(option2);
			}
		},
		mounted() {
			this.initChart()
		}
	}
</script>

<style scoped>
.container{
	height: 600rpx;
	box-shadow: 0 0 10rpx gray;
}
.predict{
	margin-top: 80rpx;
	height: 400rpx;
}
</style>
